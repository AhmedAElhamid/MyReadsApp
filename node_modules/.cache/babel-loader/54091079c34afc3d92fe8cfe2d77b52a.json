{"ast":null,"code":"import _objectSpread from \"/Users/ahmedabdelhamid/MyReadsApp/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n// const api = \"https://reactnd-books-api.udacity.com\"\nvar api = 'http://localhost:5001'; // Generate a unique token for storing your bookshelf data on the backend server.\n\nvar token = localStorage.token;\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\nvar headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n};\nexport var get = function get(bookId) {\n  return fetch(\"\".concat(api, \"/books/\").concat(bookId), {\n    headers: headers\n  }).then(function (res) {\n    return res.json();\n  }).then(function (data) {\n    return data.book;\n  });\n};\nexport var getAll = function getAll() {\n  return fetch(\"\".concat(api, \"/books\"), {\n    headers: headers\n  }).then(function (res) {\n    return res.json();\n  }).then(function (data) {\n    return data.books;\n  });\n};\nexport var update = function update(book, shelf) {\n  return fetch(\"\".concat(api, \"/books/\").concat(book.id), {\n    method: 'PUT',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify({\n      shelf: shelf\n    })\n  }).then(function (res) {\n    return res.json();\n  }).then(function (data) {\n    return data.books;\n  });\n};\nexport var search = function search(query) {\n  fetch(\"\".concat(api, \"/search\"), {\n    method: 'POST',\n    headers: _objectSpread({}, headers, {\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify({\n      query: query\n    })\n  }).then(function (res) {\n    return res.json();\n  }).then(function (data) {\n    return data.books;\n  });\n  console.log(\"sending query \".concat(query, \" to the server\"));\n}; // export const search = (query) =>\n//   console.log(`sending query ${query} to the server`);\n//   fetch(`${api}/search`, {\n//     method: 'POST',\n//     headers: {\n//       ...headers,\n//       'Content-Type': 'application/json'\n//     },\n//     body: JSON.stringify({ query })\n//   })\n//   .then(res => res.json())\n//   .then(data => data.books)","map":{"version":3,"sources":["/Users/ahmedabdelhamid/MyReadsApp/src/BooksAPI.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","get","bookId","fetch","then","res","json","data","book","getAll","books","update","shelf","id","method","body","JSON","stringify","search","query","console","log"],"mappings":";AACA;AACA,IAAMA,GAAG,GAAG,uBAAZ,C,CAGA;;AACA,IAAIC,KAAK,GAAGC,YAAY,CAACD,KAAzB;AACA,IAAI,CAACA,KAAL,EACEA,KAAK,GAAGC,YAAY,CAACD,KAAb,GAAqBE,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAC,CAAnC,CAA7B;AAEF,IAAMC,OAAO,GAAG;AACd,YAAU,kBADI;AAEd,mBAAiBN;AAFH,CAAhB;AAKA,OAAO,IAAMO,GAAG,GAAG,SAANA,GAAM,CAACC,MAAD;AAAA,SACjBC,KAAK,WAAIV,GAAJ,oBAAiBS,MAAjB,GAA2B;AAAEF,IAAAA,OAAO,EAAPA;AAAF,GAA3B,CAAL,CACGI,IADH,CACQ,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GADX,EAEGF,IAFH,CAEQ,UAAAG,IAAI;AAAA,WAAIA,IAAI,CAACC,IAAT;AAAA,GAFZ,CADiB;AAAA,CAAZ;AAKP,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,SACpBN,KAAK,WAAIV,GAAJ,aAAiB;AAAEO,IAAAA,OAAO,EAAPA;AAAF,GAAjB,CAAL,CACGI,IADH,CACQ,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GADX,EAEGF,IAFH,CAEQ,UAAAG,IAAI;AAAA,WAAIA,IAAI,CAACG,KAAT;AAAA,GAFZ,CADoB;AAAA,CAAf;AAKP,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACH,IAAD,EAAOI,KAAP;AAAA,SACpBT,KAAK,WAAIV,GAAJ,oBAAiBe,IAAI,CAACK,EAAtB,GAA4B;AAC/BC,IAAAA,MAAM,EAAE,KADuB;AAE/Bd,IAAAA,OAAO,oBACFA,OADE;AAEL,sBAAgB;AAFX,MAFwB;AAM/Be,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEL,MAAAA,KAAK,EAALA;AAAF,KAAf;AANyB,GAA5B,CAAL,CAQCR,IARD,CAQM,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GART,EASCF,IATD,CASM,UAAAG,IAAI;AAAA,WAAIA,IAAI,CAACG,KAAT;AAAA,GATV,CADoB;AAAA,CAAf;AAWP,OAAO,IAAMQ,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAU;AAC9BhB,EAAAA,KAAK,WAAIV,GAAJ,cAAkB;AACrBqB,IAAAA,MAAM,EAAE,MADa;AAErBd,IAAAA,OAAO,oBACFA,OADE;AAEL,sBAAgB;AAFX,MAFc;AAMrBe,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEE,MAAAA,KAAK,EAALA;AAAF,KAAf;AANe,GAAlB,CAAL,CAQCf,IARD,CAQM,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GART,EASCF,IATD,CASM,UAAAG,IAAI;AAAA,WAAIA,IAAI,CAACG,KAAT;AAAA,GATV;AAUAU,EAAAA,OAAO,CAACC,GAAR,yBAA6BF,KAA7B;AACC,CAZI,C,CAaP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\n// const api = \"https://reactnd-books-api.udacity.com\"\nconst api = 'http://localhost:5001'\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  })\n  .then(res => res.json())\n  .then(data => data.books)\nexport const search = (query) =>{\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  })\n  .then(res => res.json())\n  .then(data => data.books)\n  console.log(`sending query ${query} to the server`);\n  }\n// export const search = (query) =>\n//   console.log(`sending query ${query} to the server`);\n//   fetch(`${api}/search`, {\n//     method: 'POST',\n//     headers: {\n//       ...headers,\n//       'Content-Type': 'application/json'\n//     },\n//     body: JSON.stringify({ query })\n//   })\n//   .then(res => res.json())\n//   .then(data => data.books)\n"]},"metadata":{},"sourceType":"module"}